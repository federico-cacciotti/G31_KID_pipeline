import numpy as np
import warnings
warnings.simplefilter('ignore', np.RankWarning)

# temperature in Kelvin
temperature = [1.40e+00, 1.50e+00, 1.60e+00, 1.70e+00, 1.80e+00, 1.90e+00, 2.00e+00, 2.10e+00, 2.20e+00, 2.30e+00, 2.40e+00, 2.50e+00, 2.60e+00, 2.70e+00, 2.80e+00, 2.90e+00, 3.00e+00, 3.10e+00, 3.20e+00, 3.30e+00, 3.40e+00, 3.50e+00, 3.60e+00, 3.70e+00, 3.80e+00, 3.90e+00, 4.00e+00, 4.20e+00, 4.40e+00, 4.60e+00, 4.80e+00, 5.00e+00, 5.20e+00, 5.40e+00, 5.60e+00, 5.80e+00, 6.00e+00, 6.50e+00, 7.00e+00, 7.50e+00, 8.00e+00, 8.50e+00, 9.00e+00, 9.50e+00, 1.00e+01, 1.05e+01, 1.10e+01, 1.15e+01, 1.20e+01, 1.25e+01, 1.30e+01, 1.35e+01, 1.40e+01, 1.45e+01, 1.50e+01, 1.55e+01, 1.60e+01, 1.65e+01, 1.70e+01, 1.75e+01, 1.80e+01, 1.85e+01, 1.90e+01, 1.95e+01, 2.00e+01, 2.10e+01, 2.20e+01, 2.30e+01, 2.40e+01, 2.50e+01, 2.60e+01, 2.70e+01, 2.80e+01, 2.90e+01, 3.00e+01, 3.10e+01, 3.20e+01, 3.30e+01, 3.40e+01, 3.50e+01, 3.60e+01, 3.70e+01, 3.80e+01, 3.90e+01, 4.00e+01, 4.20e+01, 4.40e+01, 4.60e+01, 4.80e+01, 5.00e+01, 5.20e+01, 5.40e+01, 5.60e+01, 5.80e+01, 6.00e+01, 6.50e+01, 7.00e+01, 7.50e+01, 7.73e+01, 8.00e+01, 8.50e+01, 9.00e+01, 9.50e+01, 1.00e+02, 1.05e+02, 1.10e+02, 1.15e+02, 1.20e+02, 1.25e+02, 1.30e+02, 1.35e+02, 1.40e+02, 1.45e+02, 1.50e+02, 1.55e+02, 1.60e+02, 1.65e+02, 1.70e+02, 1.75e+02, 1.80e+02, 1.85e+02, 1.90e+02, 1.95e+02, 2.00e+02, 2.05e+02, 2.10e+02, 2.15e+02, 2.20e+02, 2.25e+02, 2.30e+02, 2.35e+02, 2.40e+02, 2.45e+02, 2.50e+02, 2.55e+02, 2.60e+02, 2.65e+02, 2.70e+02, 2.73e+02, 2.75e+02, 2.80e+02, 2.85e+02, 2.90e+02, 2.95e+02, 3.00e+02, 3.05e+02, 3.10e+02, 3.15e+02, 3.20e+02, 3.25e+02, 3.30e+02, 3.35e+02, 3.40e+02, 3.45e+02, 3.50e+02, 3.55e+02, 3.60e+02, 3.65e+02, 3.70e+02, 3.75e+02, 3.80e+02, 3.85e+02, 3.90e+02, 3.95e+02, 4.00e+02, 4.05e+02, 4.10e+02, 4.15e+02, 4.20e+02, 4.25e+02, 4.30e+02, 4.35e+02, 4.40e+02, 4.45e+02, 4.50e+02, 4.55e+02, 4.60e+02, 4.65e+02, 4.70e+02, 4.75e+02, 4.80e+02, 4.85e+02, 4.90e+02, 4.95e+02, 5.00e+02]

# voltage in volts
voltage = [1.644290e+00, 1.642990e+00, 1.641570e+00, 1.640030e+00, 1.638370e+00, 1.636600e+00, 1.634720e+00, 1.632740e+00, 1.630670e+00, 1.628520e+00, 1.626290e+00, 1.624000e+00, 1.621660e+00, 1.619280e+00, 1.616870e+00, 1.614450e+00, 1.612000e+00, 1.609510e+00, 1.606970e+00, 1.604380e+00, 1.601730e+00, 1.599020e+00, 1.596260e+00, 1.593440e+00, 1.590570e+00, 1.587640e+00, 1.584650e+00, 1.578480e+00, 1.572020e+00, 1.565330e+00, 1.558450e+00, 1.551450e+00, 1.544360e+00, 1.537210e+00, 1.530000e+00, 1.522730e+00, 1.515410e+00, 1.496980e+00, 1.478680e+00, 1.460860e+00, 1.443740e+00, 1.427470e+00, 1.412070e+00, 1.397510e+00, 1.383730e+00, 1.370650e+00, 1.358200e+00, 1.346320e+00, 1.334990e+00, 1.324160e+00, 1.313810e+00, 1.303900e+00, 1.294390e+00, 1.285260e+00, 1.276450e+00, 1.267940e+00, 1.259670e+00, 1.251610e+00, 1.243720e+00, 1.235960e+00, 1.228300e+00, 1.220700e+00, 1.213110e+00, 1.205480e+00, 1.197748e+00, 1.181548e+00, 1.162797e+00, 1.140817e+00, 1.125923e+00, 1.119448e+00, 1.115658e+00, 1.112810e+00, 1.110421e+00, 1.108261e+00, 1.106244e+00, 1.104324e+00, 1.102476e+00, 1.100681e+00, 1.098930e+00, 1.097216e+00, 1.095534e+00, 1.093878e+00, 1.092244e+00, 1.090627e+00, 1.089024e+00, 1.085842e+00, 1.082669e+00, 1.079492e+00, 1.076303e+00, 1.073099e+00, 1.069881e+00, 1.066650e+00, 1.063403e+00, 1.060141e+00, 1.056862e+00, 1.048584e+00, 1.040183e+00, 1.031651e+00, 1.027594e+00, 1.022984e+00, 1.014181e+00, 1.005244e+00, 9.961740e-01, 9.869740e-01, 9.776500e-01, 9.682090e-01, 9.586570e-01, 9.490000e-01, 9.392420e-01, 9.293900e-01, 9.194460e-01, 9.094160e-01, 8.993040e-01, 8.891140e-01, 8.788510e-01, 8.685180e-01, 8.581200e-01, 8.476590e-01, 8.371380e-01, 8.265600e-01, 8.159280e-01, 8.052420e-01, 7.945050e-01, 7.837200e-01, 7.728860e-01, 7.620070e-01, 7.510820e-01, 7.401150e-01, 7.291050e-01, 7.180540e-01, 7.069640e-01, 6.958340e-01, 6.846670e-01, 6.734620e-01, 6.622230e-01, 6.509490e-01, 6.396410e-01, 6.283020e-01, 6.211410e-01, 6.169300e-01, 6.055280e-01, 5.940970e-01, 5.826370e-01, 5.711510e-01, 5.596390e-01, 5.481020e-01, 5.365420e-01, 5.249610e-01, 5.133610e-01, 5.017440e-01, 4.901060e-01, 4.784420e-01, 4.667600e-01, 4.550670e-01, 4.433710e-01, 4.316700e-01, 4.199600e-01, 4.082370e-01, 3.965030e-01, 3.847570e-01, 3.730020e-01, 3.612350e-01, 3.494530e-01, 3.376540e-01, 3.258390e-01, 3.140080e-01, 3.021610e-01, 2.902980e-01, 2.784160e-01, 2.665140e-01, 2.545920e-01, 2.426530e-01, 2.306970e-01, 2.187300e-01, 2.067580e-01, 1.947890e-01, 1.828320e-01, 1.709010e-01, 1.590100e-01, 1.471910e-01, 1.354800e-01, 1.239150e-01, 1.125530e-01, 1.014540e-01, 9.068100e-02]

# sensitivity in milliVolts/Kelvin
sensitivity = [-1.248933e+01, -1.362982e+01, -1.479334e+01, -1.597987e+01, -1.714728e+01, -1.825338e+01, -1.929817e+01, -2.026550e+01, -2.113918e+01, -2.191922e+01, -2.260560e+01, -2.318245e+01, -2.363387e+01, -2.395986e+01, -2.416041e+01, -2.435561e+01, -2.466552e+01, -2.509015e+01, -2.562951e+01, -2.621934e+01, -2.679543e+01, -2.735777e+01, -2.790637e+01, -2.844121e+01, -2.898949e+01, -2.957840e+01, -3.020793e+01, -3.158885e+01, -3.291424e+01, -3.396611e+01, -3.474443e+01, -3.524923e+01, -3.560206e+01, -3.592451e+01, -3.621659e+01, -3.647828e+01, -3.670959e+01, -3.685600e+01, -3.621463e+01, -3.499872e+01, -3.342148e+01, -3.167395e+01, -2.994713e+01, -2.831155e+01, -2.683768e+01, -2.550830e+01, -2.430614e+01, -2.319767e+01, -2.214937e+01, -2.116644e+01, -2.025408e+01, -1.940933e+01, -1.862920e+01, -1.792460e+01, -1.730641e+01, -1.677093e+01, -1.631446e+01, -1.593612e+01, -1.563506e+01, -1.540793e+01, -1.525141e+01, -1.517677e+01, -1.519531e+01, -1.533556e+01, -1.562607e+01, -1.698253e+01, -2.110864e+01, -2.076668e+01, -9.417931e+00, -4.596471e+00, -3.185347e+00, -2.578509e+00, -2.246492e+00, -2.080624e+00, -1.962611e+00, -1.880101e+00, -1.819186e+00, -1.772220e+00, -1.731560e+00, -1.697206e+00, -1.668325e+00, -1.644087e+00, -1.624491e+00, -1.609191e+00, -1.597841e+00, -1.586995e+00, -1.586581e+00, -1.591231e+00, -1.598356e+00, -1.605367e+00, -1.612265e+00, -1.619381e+00, -1.627045e+00, -1.635257e+00, -1.643959e+00, -1.667578e+00, -1.693169e+00, -1.719827e+00, -1.732521e+00, -1.746905e+00, -1.774083e+00, -1.800806e+00, -1.827230e+00, -1.852606e+00, -1.876646e+00, -1.899452e+00, -1.921105e+00, -1.941685e+00, -1.961193e+00, -1.979745e+00, -1.997460e+00, -2.014338e+00, -2.030355e+00, -2.045487e+00, -2.059734e+00, -2.073219e+00, -2.086062e+00, -2.098264e+00, -2.109921e+00, -2.121130e+00, -2.131890e+00, -2.142257e+00, -2.152285e+00, -2.161975e+00, -2.171350e+00, -2.180435e+00, -2.189231e+00, -2.197770e+00, -2.206088e+00, -2.214182e+00, -2.222062e+00, -2.229735e+00, -2.237201e+00, -2.244439e+00, -2.251431e+00, -2.258175e+00, -2.264723e+00, -2.271124e+00, -2.275081e+00, -2.277378e+00, -2.283414e+00, -2.289158e+00, -2.294612e+00, -2.299834e+00, -2.304880e+00, -2.309753e+00, -2.314259e+00, -2.318207e+00, -2.321597e+00, -2.325317e+00, -2.330256e+00, -2.334916e+00, -2.337799e+00, -2.338907e+00, -2.339537e+00, -2.340987e+00, -2.343257e+00, -2.345794e+00, -2.348043e+00, -2.350005e+00, -2.352110e+00, -2.354790e+00, -2.358044e+00, -2.361483e+00, -2.364714e+00, -2.367739e+00, -2.370871e+00, -2.374425e+00, -2.378401e+00, -2.382448e+00, -2.386213e+00, -2.389696e+00, -2.392448e+00, -2.394021e+00, -2.394415e+00, -2.393021e+00, -2.389230e+00, -2.383043e+00, -2.372133e+00, -2.354177e+00, -2.329174e+00, -2.294651e+00, -2.248133e+00, -2.189620e+00, -2.116515e+00]

# convert list to numpy array
temperature = np.array(temperature)
voltage = np.array(voltage)
sensitivity = np.array(sensitivity)

# temperature intervals
temp_lim1 = 12.
temp_lim2 = 24.
temp_lim3 = 100.
idx1 = 0
idx2 = int(np.where(temperature==temp_lim1)[0])
idx3 = int(np.where(temperature==temp_lim2)[0])
idx4 = int(np.where(temperature==temp_lim3)[0])
idx5 = temperature.size

# chebychev polinomyals
cheb_coeff1 = np.polynomial.chebyshev.chebfit(voltage[idx1:idx2], temperature[idx1:idx2], deg=20)
cheb_coeff2 = np.polynomial.chebyshev.chebfit(voltage[idx2:idx3], temperature[idx2:idx3], deg=20)
cheb_coeff3 = np.polynomial.chebyshev.chebfit(voltage[idx3:idx4], temperature[idx3:idx4], deg=20)
cheb_coeff4 = np.polynomial.chebyshev.chebfit(voltage[idx4:idx5], temperature[idx4:idx5], deg=20)

# return temperature from voltage
def voltage2temperature(vol):
	v = np.asarray(vol)

	if v.size == 1:
		if v < min(voltage):
			return np.polynomial.chebyshev.chebval(v, cheb_coeff1)
		elif v > max(voltage):
			return np.polynomial.chebyshev.chebval(v, cheb_coeff4)
		else:
			lower_idx = max(np.where(voltage >= v)[0])
			upper_idx = min(np.where(voltage <= v)[0])

			expected_temp = (temperature[lower_idx]+temperature[upper_idx])*0.5

			if expected_temp < temp_lim1:
				return np.polynomial.chebyshev.chebval(v, cheb_coeff1)
			elif expected_temp < temp_lim2:
				return np.polynomial.chebyshev.chebval(v, cheb_coeff2)
			elif expected_temp < temp_lim3:
				return np.polynomial.chebyshev.chebval(v, cheb_coeff3)
			else:
				return np.polynomial.chebyshev.chebval(v, cheb_coeff4)

	T = np.zeros(v.size)

	for i in np.arange(0, v.size):
		if v[i] < min(voltage):
			T[i] = np.polynomial.chebyshev.chebval(v[i], cheb_coeff1)
		elif v[i] > max(voltage):
			T[i] = np.polynomial.chebyshev.chebval(v[i], cheb_coeff4)
		else:
			lower_idx = max(np.where(voltage >= v[i])[0])
			upper_idx = min(np.where(voltage <= v[i])[0])

			expected_temp = (temperature[lower_idx]+temperature[upper_idx])*0.5

			if expected_temp < temp_lim1:
				T[i] = np.polynomial.chebyshev.chebval(v[i], cheb_coeff1)
			elif expected_temp < temp_lim2:
				T[i] = np.polynomial.chebyshev.chebval(v[i], cheb_coeff2)
			elif expected_temp < temp_lim3:
				T[i] = np.polynomial.chebyshev.chebval(v[i], cheb_coeff3)
			else:
				T[i] = np.polynomial.chebyshev.chebval(v[i], cheb_coeff4)

	return T
